<!DOCTYPE html>
<html>
  <head>
    <title>Grid</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <style type="text/css">
      SVG {
        width: 960px;
        height: 480px;
        background: #000;
        border-radius:4px;
        position: absolute;
        top: 0; right: 0; bottom: 0; left: 0;
        margin: auto;
      }

      html,
      body {
		margin:0;
      	padding:0;
      	width:100%;
      	height:100%;
      }

      body {
        background: #fff url('/images/playa.jpg');
      }

    </style>
  </head>
  <body>
    <script src="http://cdn.sockjs.org/sockjs-0.3.min.js"></script>
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script type="text/javascript">
      var Message = function(type, attrs) {
        this.type = type;
        this.attrs = attrs;
      };

      Message.prototype.stringify = function() {
        return JSON.stringify({
          'type': this.type,
          'attrs': this.attrs
        });
      };

//////////////

      var width = 48;
      var height = 24;
      var sock = new SockJS('http://localhost:3000/socket');
      var svg;

      sock.onopen = function() {
        console.log("connected");
        svg = d3.select('body').append('svg')
                               .attr('viewBox', '0 0 ' + width + ' ' + height)
                               .attr('width', width)
                               .attr('height', height);

        // rgb
		var circleData = [];

		for (var w=0; w < width; w++) {
			var d = {};
			d.x = w;
			var color = parseInt((width-w) / width * 255) ;
			
			for (var h=0; h < height; h++) {
				var color2 = parseInt((h) / height * 255) ;
				circleData.push({
					x: d.x,
					y: h,
					color: [color2, 255, color]
				});
			}			
		}

		var radius = 0.25;
		var xStep = radius * 4;
		var yStep = radius * 4;

        svg.selectAll("circle")
            .data(circleData)
          .enter().append("circle")
            // .attr("cx", function(d, i) { return parseInt(i % width) * xStep + radius; })
            // .attr("cy", function(d, i) { return parseInt(i / height) * yStep + radius; })
            .attr("cx", function(d, i) { return parseInt(d.x * xStep) + radius * 2; })
            .attr("cy", function(d, i) { return parseInt(d.y * yStep) + radius * 2; })
            .attr('fill', function(d, i) { return 'rgb(' + d.color.join(',') + ')'; })
            .attr("r", radius);


      };

      function randomPoint(width, height) {
        var point = [];
        point[0] = Math.floor(Math.random() * width);
        point[1] = Math.floor(Math.random() * height);
        return point;
      }
    </script>
  </body>
</html>