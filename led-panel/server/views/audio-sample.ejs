<!DOCTYPE html>
<html>
  <head>
    <title>SVG Tester</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <style type="text/css">
      SVG {
        width: 960px;
        height: 480px;
      }

      body {
        background-color: grey;
      }
    </style>
  </head>
  <body>
    <script src="http://cdn.sockjs.org/sockjs-0.3.min.js"></script>
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script src="/javascripts/bitmap.js"></script>
    <script src="/javascripts/webaudiox.js"></script>
    <script src='/javascripts/webaudiox.analyserbeatdetector.js'></script>
    <script src='/javascripts/dat.gui.min.js'></script>
    <script src='/javascripts/webaudiox.analyserbeatdetectordatgui.js'></script>

    <script type="text/javascript">
      var width = 48;
      var height = 24;
      var cellSize = 4;
      var cols = width / cellSize;
      var rows = height / cellSize;
      var sock = new SockJS('http://localhost:3000/socket');
      var svg, bitmap;

      sock.onopen = function() {
        var row, col, color;
        console.log("connected");
        svg = d3.select('body').append('svg')
                               .attr('viewBox', '0 0 ' + width + ' ' + height)
                               .attr('width', width)
                               .attr('height', height);

        bitmap = new Bitmap(width, height, svg);

        for (var i = 0; i < rows; i++) {
          row = i * cellSize;
          for (var j = 0; j < cols; j++) {
            col = j * cellSize;
            color = randomColor('rgb');
            bitmap.drawRect(col, row, col + cellSize, row + cellSize, color[0], color[1], color[2]);
          }
        }

        bitmap.drawSVG();

        setInterval(function() {
          sock.send(JSON.stringify({
            "type": "bitmap",
            "bitmap": bitmap.data
          }));
        }, 5);
      };

      function randomPoint(width, height) {
        var point = [];
        point[0] = Math.floor(Math.random() * width);
        point[1] = Math.floor(Math.random() * height);
        return point;
      }
      
      function randomColor(format) {
        var rint = Math.round(0xffffff * Math.random());
        return [(rint >> 16),(rint >> 8 & 255),(rint & 255)];
      }
      var context = new AudioContext()

        // Create lineOut
        var lineOut = new WebAudiox.LineOut(context)
        lineOut.volume  = 0;

        var analyser  = context.createAnalyser()
        analyser.connect(lineOut.destination);
        lineOut.destination = analyser;
        
        // get microphone as source
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
        navigator.getUserMedia( {audio:true},  function gotStream(stream) {
         // Create an AudioNode from the stream.
         var source  = context.createMediaStreamSource( stream );
          
         source.connect(lineOut.destination);
        }, function didntGetStream(e) {
          console.log("e", e);
        });  
        
        
        var analyser2volume = new WebAudiox.Analyser2Volume(analyser);


        /**
           * note on how to compute bpm
           * - store the timestamp of each beat
           * - store only the last 100
           * - do a statistical computation on those timestamp to get bpm estimation
           *   - simple average is one
           *   - remove monster values in your average" 
           *   - a simple median ?
           *   - see http://en.wikipedia.org/wiki/Robust_statistics for details
           * - do a dat gui to tune those parameters
           * - test estimator by simulating a beat
           */

          var beatDetector= new WebAudiox.AnalyserBeatDetector(analyser, function(){
            console.log('beat');
            for (var i = 0; i < rows; i++) {
              row = i * cellSize;
              for (var j = 0; j < cols; j++) {
                col = j * cellSize;
                color = randomColor('rgb');
                bitmap.drawRect(col, row, col + cellSize, row + cellSize, color[0], color[1], color[2]);
              }
            }

            bitmap.drawSVG();
            // bitmap.debugFrame();
          });
          WebAudiox.addAnalyserBeatDetectorDatGui(beatDetector)
          // loop and update
          setInterval(function(){
            beatDetector.update(1/60)
          }, 1000/60);
    </script>
  </body>
</html>