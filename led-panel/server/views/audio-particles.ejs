<!DOCTYPE html>
<html>
  <head>
    <title>SVG Tester</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <style type="text/css">
      SVG {
        width: 960px;
        height: 480px;
      }

      body {
        background-color: grey;
      }
    </style>
  </head>
  <body>
    <script src="/javascripts/d3.v3.min.js" charset="utf-8"></script>
    <script src="/javascripts/webaudiox.js"></script>
    <script src='/javascripts/webaudiox.analyserbeatdetector.js'></script>
    <script src='/javascripts/dat.gui.min.js'></script>
    <script src='/javascripts/webaudiox.analyserbeatdetectordatgui.js'></script>

    <script type="text/javascript">
    var width = Math.max(960, innerWidth),
        height = Math.max(500, innerHeight);

    var x1 = width / 2,
        y1 = height / 2,
        x0 = x1,
        y0 = y1,
        i = 0,
        r = 200,
        τ = 2 * Math.PI;

    var canvas = d3.select("body").append("canvas")
        .attr("width", width)
        .attr("height", height);
        // .on("ontouchstart" in document ? "touchmove" : "mousemove", move);

    var context = canvas.node().getContext("2d");
    context.globalCompositeOperation = "lighter";
    context.lineWidth = 2;

    // d3.timer(function() {
    var cycle = function () {
      x1 = Math.floor(Math.random() * width);
      y1 = Math.floor(Math.random() * height);

      context.clearRect(0, 0, width, height);

      var z = d3.hsl(++i % 360, 1, .5).rgb(),
          c = "rgba(" + z.r + "," + z.g + "," + z.b + ",",
          x = x0 += (x1 - x0) * .1,
          y = y0 += (y1 - y0) * .1;

      d3.select({}).transition()
          .duration(2000)
          .ease(Math.sqrt)
          .tween("circle", function() {
            return function(t) {
              context.strokeStyle = c + (1 - t) + ")";
              context.beginPath();
              context.arc(x, y, r * t, 0, τ);
              context.stroke();
            };
          });
    }; 
    // });

    function move() {
      var mouse = d3.mouse(this);
      x1 = mouse[0];
      y1 = mouse[1];
      d3.event.preventDefault();
    }

      function randomPoint(width, height) {
        var point = [];
        point[0] = Math.floor(Math.random() * width);
        point[1] = Math.floor(Math.random() * height);
        return point;
      }

      function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }
      
      function randomColor(format) {
        var rint = Math.round(0xffffff * Math.random());
        return [(rint >> 16),(rint >> 8 & 255),(rint & 255)];
      }
      var audioContext = new AudioContext()

      // Create lineOut
      var lineOut = new WebAudiox.LineOut(audioContext)
      lineOut.volume  = 0;

      var analyser  = audioContext.createAnalyser()
      analyser.connect(lineOut.destination);
      lineOut.destination = analyser;
      
      // get microphone as source
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
      navigator.getUserMedia( {audio:true},  function gotStream(stream) {
       // Create an AudioNode from the stream.
       var source  = audioContext.createMediaStreamSource( stream );
        
       source.connect(lineOut.destination);
      }, function didntGetStream(e) {
        console.log("e", e);
      });  
      
      
      var analyser2volume = new WebAudiox.Analyser2Volume(analyser);


      /**
         * note on how to compute bpm
         * - store the timestamp of each beat
         * - store only the last 100
         * - do a statistical computation on those timestamp to get bpm estimation
         *   - simple average is one
         *   - remove monster values in your average" 
         *   - a simple median ?
         *   - see http://en.wikipedia.org/wiki/Robust_statistics for details
         * - do a dat gui to tune those parameters
         * - test estimator by simulating a beat
         */

      var beatDetector = new WebAudiox.AnalyserBeatDetector(analyser, function(){
        console.log('beat');
        cycle();
      });
      WebAudiox.addAnalyserBeatDetectorDatGui(beatDetector);
      // loop and update
      setInterval(function(){
        beatDetector.update(1/60);
      }, 1000/60);
    </script>
  </body>
</html>