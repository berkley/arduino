
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Animated Bézier Curves - Jason Davies</title>
    <script src="http://cdn.sockjs.org/sockjs-0.3.min.js"></script>
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <meta name="author" content="Jason Davies">
    <style>
      .curve, .line {
        fill: none;
        stroke-width: 1px;
      }
      .curve {
        stroke: red;
        stroke-width: 3px;
      }
      .control {
        fill: #ccc;
        stroke: #000;
        stroke-width: .5px;
      }
      .t, .controltext {
        font-size: .6em;
      }
    </style>
  </head>
  <body>
    <h1>Animated Bézier Curves</h1>
    <p>Play with the control points to modify the curves!</p>
    <div id="vis">
      <script>
      var pathToSend;
      var sock = new SockJS('http://localhost:3000/socket');

      sock.onopen = function() {
        console.log("connected");
        
        setInterval(function() {
          sock.send(pathToSend.attr('d'));
        }, 2000);
      };

      var w = 48,
          h = 24,
          t = .5,
          delta = .01,
          padding = 10,
          points = [{x: 10, y: 48 }, {x: 0, y: 0}, {x: 20, y: 0}, {x: 20, y: 48}, {x: 40, y: 15}],
          bezier = {},
          line = d3.svg.line().x(x).y(y),
          n = 1,
          stroke = d3.scale.category20b(),
          orders = d3.range(2, n + 2);

      var vis = d3.select("#vis").selectAll("svg")
          .data(orders)
        .enter().append("svg")
          .attr("width", w + 2 * padding)
          .attr("height", h + 2 * padding)
        .append("g")
          .attr("transform", "translate(" + padding + "," + padding + ")");

      update();

      vis.selectAll("circle.control")
          .data(function(d) { return points.slice(0, d) })
        .enter().append("circle")
          .attr("class", "control")
          .attr("r", 7)
          .attr("cx", x)
          .attr("cy", y)
          .call(d3.behavior.drag()
            .on("dragstart", function(d) {
              this.__origin__ = [d.x, d.y];
            })
            .on("drag", function(d) {
              d.x = Math.min(w, Math.max(0, this.__origin__[0] += d3.event.dx));
              d.y = Math.min(h, Math.max(0, this.__origin__[1] += d3.event.dy));
              bezier = {};
              update();
              vis.selectAll("circle.control")
                .attr("cx", x)
                .attr("cy", y);
            })
            .on("dragend", function() {
              delete this.__origin__;
            }));

      vis.append("text")
        .attr("class", "t")
        .attr("x", w / 2)
        .attr("y", h)
        .attr("text-anchor", "middle");

      vis.selectAll("text.controltext")
          .data(function(d) { return points.slice(0, d); })
        .enter().append("text")
          .attr("class", "controltext")
          .attr("dx", "10px")
          .attr("dy", ".4em")
          .text(function(d, i) { return "P" + i });

      var last = 0;
      d3.timer(function(elapsed) {
        t = (t + (elapsed - last) / 5000) % 1;
        last = elapsed;
        update();
      });

      function update() {
        var interpolation = vis.selectAll("g")
            .data(function(d) { return getLevels(d, t); });
        interpolation.enter().append("g")
            .style("fill", colour)
            .style("stroke", colour);

        var circle = interpolation.selectAll("circle")
            .data(Object);
        circle.enter().append("circle")
            .attr("r", 4);
        circle
            .attr("cx", x)
            .attr("cy", y);

        var path = interpolation.selectAll("path")
            .data(function(d) { return [d]; });
        path.enter().append("path")
            .attr("class", "line")
            .attr("d", line);
        path.attr("d", line);

        var curve = pathToSend = vis.selectAll("path.curve")
            .data(getCurve);
        curve.enter().append("path")
            .attr("class", "curve");
        curve.attr("d", line);

        vis.selectAll("text.controltext")
            .attr("x", x)
            .attr("y", y);
        vis.selectAll("text.t")
            .text("t=" + t.toFixed(2));
      }

      function interpolate(d, p) {
        if (arguments.length < 2) p = t;
        var r = [];
        for (var i=1; i<d.length; i++) {
          var d0 = d[i-1], d1 = d[i];
          r.push({x: d0.x + (d1.x - d0.x) * p, y: d0.y + (d1.y - d0.y) * p});
        }
        return r;
      }

      function getLevels(d, t_) {
        if (arguments.length < 2) t_ = t;
        var x = [points.slice(0, d)];
        for (var i=1; i<d; i++) {
          x.push(interpolate(x[x.length-1], t_));
        }
        return x;
      }

      function getCurve(d) {
        var curve = bezier[d];
        if (!curve) {
          curve = bezier[d] = [];
          for (var t_=0; t_<=1; t_+=delta) {
            var x = getLevels(d, t_);
            curve.push(x[x.length-1][0]);
          }
        }
        return [curve.slice(0, t / delta + 1)];
      }

      function x(d) { return d.x; }
      function y(d) { return d.y; }
      function colour(d, i) {
        stroke(-i);
        return d.length > 1 ? stroke(i) : "red";
      }
      </script>
    </div>
    <p>
    These animations illustrate how a parametric <a href="http://en.wikipedia.org/wiki/Bezier_Curve">Bézier curve</a> is constructed.
    The parameter <em>t</em> ranges from 0 to 1.
    In the simplest case, a first-order Bézier curve, the curve is a straight line between the control points.
    </p>
    <p>
    For a second-order or quadratic Bézier curve, first we find two intermediate points that are <em>t</em> along the lines between the three control points.
    Then we perform the same interpolation step again and find another point that is <em>t</em> along the line between those two intermediate points.
    Plotting this last point yields a quadratic Bézier curve.
    The same steps can be repeated for higher orders.
    </p>
    <p>
    Written using the <a href="http://mbostock.github.com/d3/">D3 visualisation library</a>.
    Suggested by <a href="http://graphics.stanford.edu/~mbostock/">Mike Bostock</a> and inspired by a <a href="http://en.wikipedia.org/wiki/Bezier_Curve#Constructing_B.C3.A9zier_curves">similar animation on Wikipedia</a>.
    <p>Requires a SVG-capable browser e.g. <a
      href="http://www.mozilla.org/firefox/">Mozilla Firefox</a>, WebKit (<a
      href="http://www.google.com/chrome">Google Chrome</a>, <a
      href="http://www.apple.com/safari/">Safari</a> &amp;c.) or Internet Explorer 9+.
  </body>
</html>
