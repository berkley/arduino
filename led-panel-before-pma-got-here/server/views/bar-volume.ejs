<!DOCTYPE html>
<html>
  <head>
    <title>SVG Tester</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <style type="text/css">
      SVG {
        width: 960px;
        height: 480px;
      }

      body {
        background-color: grey;
      }
    </style>
  </head>
  <body>
    <script src="http://cdn.sockjs.org/sockjs-0.3.min.js"></script>
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script src="/javascripts/bitmap.js"></script>
    <script src="/javascripts/webaudiox.js"></script>
    <script src='/javascripts/webaudiox.analyserbeatdetector.js'></script>
    <script src='/javascripts/dat.gui.min.js'></script>
    <script src='/javascripts/webaudiox.analyserbeatdetectordatgui.js'></script>

    <script type="text/javascript">
      var width = 48;
      var height = 24;
      var cellSize = 8;
      var cols = width / cellSize;
      var rows = height / cellSize;
      var sock = new SockJS('http://localhost:3000/socket');
      var svg, bitmap;
      var row, col, color;

      svg = d3.select('body').append('svg')
                             .attr('viewBox', '0 0 ' + width + ' ' + height)
                             .attr('width', width)
                             .attr('height', height);

      bitmap = new Bitmap(width, height, svg);
      bitmap.buildArray();

      // setInterval(function() {
      //   var cellSizes = [1,2,4,8,12,24];
      //   cellSize = cellSizes[Math.floor(Math.random() * cellSizes.length)];
      //   cols = width / cellSize;
      //   rows = height / cellSize;
      // }, getRandomInt(1500, 4000));

      sock.onopen = function() {
        console.log("connected");

        setInterval(function() {
          sock.send(JSON.stringify({
            "type": "bitmap",
            "bitmap": bitmap.data
          }));
        }, 5);
      };

      function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }
      
      function randomColor(format) {
        var rint = Math.round(0xffffff * Math.random());
        return [(rint >> 16),(rint >> 8 & 255),(rint & 255)];
      }
      var context = new AudioContext()

      // Create lineOut
      var lineOut = new WebAudiox.LineOut(context)
      lineOut.volume  = 0;

      var analyser  = context.createAnalyser()
      analyser.connect(lineOut.destination);
      lineOut.destination = analyser;
      
      // get microphone as source
      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia;
      navigator.getUserMedia( {audio:true},  function gotStream(stream) {
       // Create an AudioNode from the stream.
       var source  = context.createMediaStreamSource( stream );
        
       source.connect(lineOut.destination);
      }, function didntGetStream(e) {
        console.log("e", e);
      });  
      
      var analysers = {
        0: new WebAudiox.Analyser2Volume(analyser, 100),
        1: new WebAudiox.Analyser2Volume(analyser, 100, 100),
        2: new WebAudiox.Analyser2Volume(analyser, 100, 200),
        3: new WebAudiox.Analyser2Volume(analyser, 100, 300),
        4: new WebAudiox.Analyser2Volume(analyser, 100, 400)
      };

      setInterval(function() {
        for (var analyser in analysers) {
          var volume = analysers[analyser].rawValue();
          var color = randomColor();
          console.log(analyser, analyser * cellSize, height * volume);
          bitmap.drawRect(analyser * cellSize, Math.floor(height - (height * volume)), (analyser + 1) * cellSize, height, color[0], color[1], color[2]);
          bitmap.drawSVG();
        }
      }, 1000);

    </script>
  </body>
</html>